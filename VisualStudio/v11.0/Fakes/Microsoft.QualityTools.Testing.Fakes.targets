<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="3.5" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--=====================================================================
      Begin Microsoft Fakes 
  ======================================================================-->
  <!--== Multiple Import Guard -->
  <PropertyGroup>
    <FakesImported>true</FakesImported>
  </PropertyGroup>

  <!-- 
    ** Customizing the Fakes build. **  
    Properties:
      FakesBinPath - path containing the Fakes binaries
    
  -->  
  <PropertyGroup>
    <FakesBinPath Condition="$(FakesBinPath) == ''">$(MSBuildProjectDirectory)</FakesBinPath>
	  <FakesOutputPath Condition="$(FakesOutputPath) == ''">$(ProjectDir)FakesAssemblies</FakesOutputPath>
    <FakesIntermediatePath>$([System.IO.Path]::Combine('$(ProjectDir)','$(IntermediateOutputPath)Fakes'))</FakesIntermediatePath>
    <FakesContinueOnError Condition="$(FakesContinueOnError) == ''">false</FakesContinueOnError>
    <FakesToolsPath Condition="$(FakesToolsPath) == ''">$(FakesBinPath)</FakesToolsPath>
    <!-- Change the verbosity to the following for increased logging: Noisy, Information, Message, Warning, Error, Critical -->
    <FakesVerbosity>Warning</FakesVerbosity>
    <FakesTasks>$(FakesBinPath)\Microsoft.QualityTools.Testing.Fakes.Tasks.dll</FakesTasks>
  </PropertyGroup>
  
  <ItemGroup>
    <AvailableItemName Include="Fakes" />
  </ItemGroup>

  <UsingTask TaskName="Microsoft.QualityTools.Testing.Fakes.GenerateFakes" AssemblyFile="$(FakesTasks)" />
  <UsingTask TaskName="Microsoft.QualityTools.Testing.Fakes.ReportFakesErrors" AssemblyFile="$(FakesTasks)" />

  <!-- make sure the Fakes output path is probed first -->
  <PropertyGroup>
    <AssemblySearchPaths>
      $(FakesOutputPath);
      $(AssemblySearchPaths)
    </AssemblySearchPaths>
  </PropertyGroup>  
  
  <PropertyGroup>
    <FakesGenerateBeforeBuildDependsOn>
      $(FakesGenerateBeforeBuildDependsOn);
      ResolveFakesReferences;
      BuildFakesAssemblies;
    </FakesGenerateBeforeBuildDependsOn>
  </PropertyGroup>

  <!-- Collects the references excluding Fakes assembly files. -->
  <Target
    Name="ResolveFakesReferences"
    Condition="@(Fakes) != '' AND $(BuildingProject)">
    <ItemGroup>
      <ReferenceWithoutFakes Include="@(Reference)" />
      <ReferenceWithoutFakes Remove="$(FakesOutputPath)\*.Fakes.dll" />
    </ItemGroup>
    <PropertyGroup>
      <FakesResolveAssemblyReferencesStateFile>$(IntermediateOutputPath)$(MSBuildProjectFile)FakesResolveAssemblyReference.cache</FakesResolveAssemblyReferencesStateFile>
    </PropertyGroup>
    <ResolveAssemblyReference
        Assemblies="@(ReferenceWithoutFakes)"
        AssemblyFiles="@(_ResolvedProjectReferencePaths);@(_ExplicitReference)"
        TargetFrameworkDirectories="$(TargetFrameworkDirectory)"
        InstalledAssemblyTables="@(InstalledAssemblyTables);@(RedistList)"
        IgnoreDefaultInstalledAssemblyTables="$(IgnoreDefaultInstalledAssemblyTables)"
        IgnoreDefaultInstalledAssemblySubsetTables="$(IgnoreInstalledAssemblySubsetTables)"
        CandidateAssemblyFiles="@(Content);@(None)"
        SearchPaths="$(AssemblySearchPaths)"
        AllowedAssemblyExtensions="$(AllowedReferenceAssemblyFileExtensions)"
        AllowedRelatedFileExtensions="$(AllowedReferenceRelatedFileExtensions)"
        TargetProcessorArchitecture="$(ProcessorArchitecture)"
        AppConfigFile="@(_ResolveAssemblyReferencesApplicationConfigFileForExes)"
        AutoUnify="$(AutoUnifyAssemblyReferences)"
        IgnoreVersionForFrameworkReferences="$(IgnoreVersionForFrameworkReferences)"
        FindDependencies="true"
        FindSatellites="false"
        FindSerializationAssemblies="false"
        FindRelatedFiles="true"
        Silent="true"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
        TargetFrameworkMonikerDisplayName="$(TargetFrameworkMonikerDisplayName)"    
        TargetedRuntimeVersion="$(TargetedRuntimeVersion)"
        StateFile="$(FakesResolveAssemblyReferencesStateFile)"
        InstalledAssemblySubsetTables="@(InstalledAssemblySubsetTables)"
        TargetFrameworkSubsets="@(_ReferenceInstalledAssemblySubsets)"
        FullTargetFrameworkSubsetNames="$(FullReferenceAssemblyNames)"
        FullFrameworkFolders="$(_FullFrameworkReferenceAssemblyPaths)"
        FullFrameworkAssemblyTables="@(FullFrameworkAssemblyTables)"
        ProfileName=""
        LatestTargetFrameworkDirectories="@(LatestTargetFrameworkDirectories)"
        CopyLocalDependenciesWhenParentReferenceInGac="$(CopyLocalDependenciesWhenParentReferenceInGac)">
      <Output TaskParameter="ResolvedFiles" ItemName="FakesResolvedReferencePaths"/>
      <Output TaskParameter="ResolvedDependencyFiles" ItemName="FakesResolvedReferenceDependencyPaths"/>
      <Output TaskParameter="RelatedFiles" ItemName="FakesRelatedPaths"/>
      <Output TaskParameter="SatelliteFiles" ItemName="FakesSatellitePaths"/>
      <Output TaskParameter="SuggestedRedirects" ItemName="FakesSuggestedRedirects"/>
      <Output TaskParameter="FilesWritten" ItemName="FileWrites"/>
    </ResolveAssemblyReference>
  </Target>
  <!-- Generates fakes assembly files, if outdated. -->
  <Target
    Name="BuildFakesAssemblies"
    Condition="@(Fakes) != '' AND $(BuildingProject)"
    Inputs="
      @(Fakes);
      @(FakesReferencePaths);
      @(FakesResolvedReferencePaths);
      @(FakesResolvedReferenceDependencyPaths);
      @(FakesRelatedPaths);
      @(FakesSatellitePaths);
      @(FakesSuggestedRedirects);
    "
    Outputs="@(Fakes->'$(FakesOutputPath)\%(FileName).Fakes.dll')">
    <GenerateFakes
      ContinueOnError="$(FakesContinueOnError)"
      Verbosity="$(FakesVerbosity)"
      ForceX86="$(FakesForceX86)"
      TargetFrameworkVersion="$(TargetFrameworkVersion)"
      TargetRuntimeVersion="$(TargetedRuntimeVersion)"
      ReferenceFiles="
        @(FakesReferencePaths);
        @(FakesResolvedReferencePaths);
        @(FakesResolvedReferenceDependencyPaths);"
      SearchPaths="@(FakesSearchPaths)"
      CommandLineArguments="$(FakesCommandLineArguments)"
      OutputPath="$(FakesOutputPath)"
      IntermediatePath="$(FakesIntermediatePath)"
      Fakes="@(Fakes)"
      ToolsPath="$(FakesToolsPath)">
      <Output TaskParameter="FakesAssemblies" ItemName="FakesAssemblies" />
      <Output TaskParameter="FakesConfigurations" ItemName="FakesConfigurations" />
    </GenerateFakes>
    <ReportFakesErrors MessageFiles="@(FakesAssemblies->'%(RootDir)%(Directory)%(Filename).messages')"/>
    <Touch Files="@(FakesAssemblies);@(FakesConfigurations)" />
    <ItemGroup>
      <FileWrites Include="$(FakesIntermediatePath)\**" />
      <ReferenceCopyLocalPaths Include="@(FakesConfigurations)" />
    </ItemGroup>
  </Target>

  <Target
    Name="FakesGenerateBeforeBuild"
    Condition="@(Fakes) != '' AND $(BuildingProject)"
    DependsOnTargets="$(FakesGenerateBeforeBuildDependsOn)">
<!--    <ItemGroup>
      <FakesAssemblies Include="$(FakesOutputPath)\*.Fakes.dll" />
    </ItemGroup>
    <ItemGroup>
      <ReferencePath Include="@(FakesAssemblies)" />
      <ReferenceCopyLocalPaths Include="@(FakesAssemblies)" />
      <ReferenceCopyLocalPaths Include="@(FakesConfigurations)" />
    </ItemGroup> -->
  </Target>

  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>
      $(ResolveAssemblyReferencesDependsOn);
      FakesGenerateBeforeBuild;
    </ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>

  <!--=====================================================================
      End Microsoft Fakes 
  ======================================================================-->
</Project>